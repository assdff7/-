<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>神経衰弱</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .card {
      transition: all 0.3s;
    }
    .card:hover {
      transform: scale(1.05);
    }
  </style>
</head>
<body>
  <div id="app" class="min-h-screen bg-gradient-to-br from-purple-400 via-pink-300 to-blue-300 flex flex-col items-center justify-center p-8">
    <h1 class="text-4xl font-bold text-white mb-6 drop-shadow-lg">神経衰弱</h1>
    <div class="bg-white bg-opacity-90 rounded-lg p-6 mb-6 shadow-xl">
      <div class="flex gap-8 text-lg font-semibold">
        <div>残り回数: <span id="remaining" class="text-blue-600">10</span></div>
        <div>得点: <span id="score" class="text-green-600">0</span> / 8</div>
      </div>
    </div>

    <div id="gameOverModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white rounded-2xl p-12 text-center shadow-2xl">
        <div id="resultEmoji" class="text-8xl mb-4"></div>
        <h2 id="resultTitle" class="text-4xl font-bold mb-4"></h2>
        <p id="resultMessage" class="text-xl text-gray-700 mb-6"></p>
        <button
          onclick="initializeGame()"
          class="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-8 py-3 rounded-full text-lg font-semibold hover:from-blue-600 hover:to-purple-600 transition-all"
        >
          もう一度プレイ
        </button>
      </div>
    </div>

    <div id="cardGrid" class="grid grid-cols-4 gap-4"></div>

    <button
      onclick="initializeGame()"
      class="mt-8 bg-white text-purple-600 px-6 py-3 rounded-full font-semibold hover:bg-purple-50 transition-all shadow-lg"
    >
      ゲームをリセット
    </button>
  </div>

  <script>
    const symbols = ['🌸', '🌺', '🌻', '🌼', '🌷', '🌹', '🍎', '🍊'];
    let cards = [];
    let flipped = [];
    let matched = [];
    let turns = 0;
    let score = 0;
    let gameOver = false;
    let won = false;

    function initializeGame() {
      const shuffledCards = [...symbols, ...symbols]
        .sort(() => Math.random() - 0.5)
        .map((symbol, index) => ({ id: index, symbol }));
      
      cards = shuffledCards;
      flipped = [];
      matched = [];
      turns = 0;
      score = 0;
      gameOver = false;
      won = false;

      updateUI();
      renderCards();
      document.getElementById('gameOverModal').classList.add('hidden');
    }

    function updateUI() {
      document.getElementById('remaining').textContent = 10 - turns;
      document.getElementById('score').textContent = score;
    }

    function renderCards() {
      const grid = document.getElementById('cardGrid');
      grid.innerHTML = '';

      cards.forEach((card) => {
        const cardDiv = document.createElement('div');
        cardDiv.className = `card w-24 h-24 flex items-center justify-center text-5xl rounded-xl cursor-pointer ${
          flipped.includes(card.id) || matched.includes(card.id)
            ? 'bg-white shadow-lg'
            : 'bg-gradient-to-br from-indigo-500 to-purple-600 shadow-md'
        } ${matched.includes(card.id) ? 'opacity-50' : ''}`;
        
        cardDiv.textContent = flipped.includes(card.id) || matched.includes(card.id) ? card.symbol : '';
        cardDiv.onclick = () => handleCardClick(card.id);
        
        grid.appendChild(cardDiv);
      });
    }

    function handleCardClick(id) {
      if (flipped.length === 2 || flipped.includes(id) || matched.includes(id) || gameOver) {
        return;
      }

      flipped.push(id);
      renderCards();

      if (flipped.length === 2) {
        const [first, second] = flipped;
        const firstCard = cards.find(card => card.id === first);
        const secondCard = cards.find(card => card.id === second);

        const newTurns = turns + 1;

        if (firstCard.symbol === secondCard.symbol) {
          setTimeout(() => {
            matched.push(first, second);
            flipped = [];
            score++;
            turns = newTurns;
            updateUI();
            renderCards();

            if (matched.length === 16) {
              won = true;
              gameOver = true;
              showGameOver();
            } else if (newTurns >= 10) {
              gameOver = true;
              showGameOver();
            }
          }, 600);
        } else {
          setTimeout(() => {
            flipped = [];
            turns = newTurns;
            updateUI();
            renderCards();

            if (newTurns >= 10) {
              gameOver = true;
              showGameOver();
            }
          }, 1000);
        }
      }
    }

    function showGameOver() {
      const modal = document.getElementById('gameOverModal');
      const emoji = document.getElementById('resultEmoji');
      const title = document.getElementById('resultTitle');
      const message = document.getElementById('resultMessage');

      if (won) {
        emoji.textContent = '🏆';
        title.textContent = 'おめでとう！';
        title.className = 'text-4xl font-bold text-yellow-500 mb-4';
        message.textContent = '全てのペアを見つけました！';
      } else {
        emoji.textContent = '😢';
        title.textContent = 'あなたの負け';
        title.className = 'text-4xl font-bold text-red-500 mb-4';
        message.textContent = '10回以内にクリアできませんでした';
      }

      modal.classList.remove('hidden');
    }

    // ゲーム開始
    initializeGame();
  </script>
</body>
</html>